--Base Tables
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560001, 'BHC_CPV_LAVAL.BS_LVL_MARSXP_CO_SAMPLE_TEST_LG', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_MARSXP_CO_SAMPLE_TEST_LG (
    row_id BIGINT  identity ,
	ORDER_ID VARCHAR(255),
	BATCH_ID VARCHAR(255),
	LOT_ID VARCHAR(255),
	SAMPLE_PLAN_ID VARCHAR(255),
	SAMPLE_PLAN_VER VARCHAR(255),
	TEST_TYPE VARCHAR(255),
	REQUEST_TIME VARCHAR(255),
	REQUEST_BY VARCHAR(255),
	SAMP_PERFORMED_BY VARCHAR(255),
	SAMP_TIMESTAMP VARCHAR(27),
	SAMP_STATUS_TEXT VARCHAR(75),
	DATA_STATUS_TEXT VARCHAR(75),
	MEAN VARCHAR(255),
	"RANGE" VARCHAR(255),
	FAILED_RULES_FLAG VARCHAR(1),
	PERFORMED_BY VARCHAR(255),
	CHECKED_BY VARCHAR(255),
	ENTRY_TIMESTAMP VARCHAR(255),
	TRACKING_ID VARCHAR(255),
	INDIV_SAMP_PROMPT VARCHAR(255),
	VALUE VARCHAR(255),
	REC_OPRN_ID VARCHAR(255),
	STAGE_ID VARCHAR(255),
	inrt_dt timestamp      DEFAULT (''NOW''::character varying)::timestamp without time zone 
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560002, 'BHC_CPV_LAVAL.BS_LVL_MARSXP_MM_MATERIAL_PLANT_SP', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_MARSXP_MM_MATERIAL_PLANT_SP (
    row_id BIGINT  identity ,
	PLANT_ID VARCHAR(255)  ,
	MATERIAL_ID VARCHAR(255)  ,
	MATERIAL_TYPE VARCHAR(255)  ,
	INVENTORY_UOM VARCHAR(255)  ,
	CONTAINER_TRACK VARCHAR(255)  ,
	RECEIPT_CLASS VARCHAR(255)  ,
	ROW_STATUS VARCHAR(255)  ,
	MATERIAL_DESC VARCHAR(255)  ,
	MATERIAL_LEVEL VARCHAR(255)  ,
	PRODUCT_TYPE VARCHAR(255)  ,
	SAFETY_ID VARCHAR(255)  ,
	SAFETY_VER VARCHAR(255)  ,
	MSDS_ID VARCHAR(255)  ,
	MSDS_VER VARCHAR(255)  ,
	RCV_QC_STATUS VARCHAR(255)  ,
	RCV_QC_STATUS_ATTRIB VARCHAR(255)  ,
	OBJ_CLASS VARCHAR(255)  ,
	LAST_CHANGED_DATE VARCHAR(255)  ,
	ISSUE_UOM VARCHAR(255)  ,
	DISPENSE_TOLERANCE VARCHAR(255) ,
	INSTRUCTION VARCHAR(255) ,
	inrt_dt timestamp      DEFAULT (''NOW''::character varying)::timestamp without time zone
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560003, 'BHC_CPV_LAVAL.BS_LVL_MARSXP_PM_BATCH_ST', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_MARSXP_PM_BATCH_ST (
    row_id BIGINT  identity ,
	ORDER_ID VARCHAR(255)  ,
	BATCH_ID VARCHAR(255)  ,
	RECIPE_ID VARCHAR(255)  ,
	RECIPE_VER VARCHAR(255)  ,
	BATCH_PROD_ID VARCHAR(255)  ,
	BATCH_PROD_QTY VARCHAR(255)  ,
	BATCH_PROD_UOM VARCHAR(255)  ,
	BATCH_FACTOR VARCHAR(255) ,
	BATCH_STATUS VARCHAR(255)  ,
	OSV_ID VARCHAR(255)  ,
	LSV_ID VARCHAR(255)  ,
	DISPENSE_STATUS VARCHAR(255)  ,
	MATERIAL_STATUS VARCHAR(255)  ,
	MATL_STAGING_STATUS VARCHAR(255)  ,
	BATCH_PROD_DESC VARCHAR(255)  ,
	SCHED_BEGIN_TIME VARCHAR(255)  ,
	SCHED_END_TIME VARCHAR(255)  ,
	ACTUAL_BEGIN_TIME VARCHAR(255)  ,
	ACTUAL_END_TIME VARCHAR(255)  ,
	LABEL_PRINTED VARCHAR(1)  ,
	ALLOCATION_STATUS VARCHAR(255)  ,
	SCHED_BEGIN_DISPENSE VARCHAR(255)  ,
	DISPENSE_KIT_STATUS VARCHAR(255)  ,
	BATCH_SEQ VARCHAR(255)  ,
	inrt_dt timestamp      DEFAULT (''NOW''::character varying)::timestamp without time zone
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560004, 'BHC_CPV_LAVAL.BS_LVL_CSP_CSP_ACTIONS', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_CSP_CSP_ACTIONS (
    row_id BIGINT  identity ,
	NO_ACTION VARCHAR(255),
	NO_LOT VARCHAR(255),
	NO_PRODUIT VARCHAR(255),
	NO_TYPE VARCHAR(255),
	NO_GAME VARCHAR(255),
	NO_SUBLOT VARCHAR(255),
	SUB_MEAN VARCHAR(255),
	SUB_COUNT VARCHAR(255),
	inrt_dt timestamp      DEFAULT (''NOW''::character varying)::timestamp without time zone
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560005, 'BHC_CPV_LAVAL.BS_LVL_CSP_CSP_LIEN_PRODUITS_LOTS', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_CSP_CSP_LIEN_PRODUITS_LOTS (
    row_id BIGINT  identity ,
	NO_LOT VARCHAR(255),
	NO_PRODUIT VARCHAR(255),
	IS_CLOSED VARCHAR(1) ,
	inrt_dt timestamp      DEFAULT (''NOW''::character varying)::timestamp without time zone
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560006, 'BHC_CPV_LAVAL.BS_LVL_CSP_CSP_VALEURS', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_CSP_CSP_VALEURS (
    row_id BIGINT  identity ,
	NO_VALEUR VARCHAR(255),
	NO_ACTION VARCHAR(255),
	VALEUR VARCHAR(255),
	NO_SUBGRP VARCHAR(255),
	USER_NAME VARCHAR(255),
	DATE_TIME VARCHAR(255),
	inrt_dt timestamp      DEFAULT (''NOW''::character varying)::timestamp without time zone 
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560007, 'BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATA', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATA (
    row_id BIGINT  identity ,
	"SDCID" VARCHAR(255)  , 
	"KEYID1" VARCHAR(255)  , 
	"KEYID2" VARCHAR(255)  , 
	"KEYID3" VARCHAR(255)  , 
	"PARAMLISTID" VARCHAR(255)  , 
	"PARAMLISTVERSIONID" VARCHAR(255)  , 
	"VARIANTID" VARCHAR(255)  , 
	"DATASET" VARCHAR(255)  , 
	"LIMITRULEID" VARCHAR(255), 
	"LIMITRULEVERSIONID" VARCHAR(255), 
	"MODIFIABLEFLAG" VARCHAR(1), 
	"APPROVALSEQUENCEFLAG" VARCHAR(1), 
	"APPROVALPASSRULE" VARCHAR(255), 
	"CONDITION" VARCHAR(255), 
	"AVAILABILITYFLAG" VARCHAR(1), 
	"USERSEQUENCE" VARCHAR(255), 
	"NOTES" VARCHAR, 
	"AUDITSEQUENCE" VARCHAR(255), 
	"TRACELOGID" VARCHAR(255), 
	"CREATEDT" VARCHAR(255), 
	"CREATEBY" VARCHAR(255), 
	"CREATETOOL" VARCHAR(255), 
	"MODDT" VARCHAR(255), 
	"MODBY" VARCHAR(255), 
	"S_DATASETSTATUS" VARCHAR(255), 
	"MODTOOL" VARCHAR(255), 
	"S_NOTEBOOKREFERENCE" VARCHAR(255), 
	"S_ASSIGNEDANALYST" VARCHAR(255), 
	"S_INSTRUMENTID" VARCHAR(255), 
	"S_RETESTEDFLAG" VARCHAR(1), 
	"S_ICOVERRIDDENFLAG" VARCHAR(1), 
	"S_REMEASUREDFLAG" VARCHAR(1), 
	"S_REMEASUREINSTANCE" VARCHAR(255), 
	"S_QCBATCHID" VARCHAR(255), 
	"S_QCBATCHITEMID" VARCHAR(255), 
	"TRACKITEMID" VARCHAR(255), 
	"SCHEDULEPLANID" VARCHAR(255), 
	"SCHEDULEPLANITEMID" VARCHAR(255), 
	"UNIQUENESSFLAG" VARCHAR(1), 
	"APPROVALFLAG" VARCHAR(1), 
	"SDIDATAID" VARCHAR(255), 
	"SOURCEWORKITEMID" VARCHAR(255), 
	"SOURCEWORKITEMINSTANCE" VARCHAR(255), 
	"S_CANCELLABLEFLAG" VARCHAR(1), 
	"DOCUMENTID" VARCHAR(255), 
	"DOCUMENTVERSIONID" VARCHAR(255), 
	"BLOCKFLAG" VARCHAR(1), 
	"ACTIVEFLAG" VARCHAR(1), 
	"S_ASSIGNEDDEPARTMENT" VARCHAR(255), 
	"S_INSTRUMENTUSEDFLAG" VARCHAR(1), 
	"ARRAYMETHODID" VARCHAR(255), 
	"ARRAYMETHODVERSIONID" VARCHAR(255), 
	"COMPLETEDDT" VARCHAR(255), 
	"COMPLETEDBY" VARCHAR(255), 
	"ARRAYMETHODINSTANCE" VARCHAR(255), 
	"STARTEDDT" VARCHAR(255), 
	"ARRAYMETHODREVIEWDISPOSITION" VARCHAR(255), 
	"STARTEDBY" VARCHAR(255), 
	"CANCELLEDDT" VARCHAR(255), 
	"CANCELLEDBY" VARCHAR(255), 
	"ACCREDITEDFLAG" VARCHAR(1), 
	"WAPSTATUS" VARCHAR(255), 
	"TESTINGDEPARTMENTID" VARCHAR(255), 
	"WORKAREADEPARTMENTID" VARCHAR(255), 
	"PLANNEDSTARTDT" VARCHAR(255), 
	"SECURITYUSER" VARCHAR(255), 
	"SECURITYDEPARTMENT" VARCHAR(255), 
	"SLX_ORIGINALOPERATIONNAME" VARCHAR(255), 
	"SLX_ORIGINALOPERATIONID" VARCHAR(255), 
	"SLX_TASKPARENTID" VARCHAR(255), 
	"SLX_SUPERVISOR" VARCHAR(255),
	inrt_dt timestamp      DEFAULT ('NOW'::character varying)::timestamp without time zone 
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560008, 'BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATAITEM', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATAITEM (
    row_id BIGINT  identity ,
	"SDCID" VARCHAR(255)  , 
	"KEYID1" VARCHAR(255)  , 
	"KEYID2" VARCHAR(255)  , 
	"KEYID3" VARCHAR(255)  , 
	"PARAMLISTID" VARCHAR(255)  , 
	"PARAMLISTVERSIONID" VARCHAR(255)  , 
	"VARIANTID" VARCHAR(255)  , 
	"DATASET" VARCHAR(255)  , 
	"PARAMID" VARCHAR(255)  , 
	"PARAMTYPE" VARCHAR(255)  , 
	"REPLICATEID" VARCHAR(255)  , 
	"ALIASID" VARCHAR(255), 
	"MANDATORYFLAG" VARCHAR(1), 
	"DATATYPES" VARCHAR(255), 
	"ENTEREDVALUE" VARCHAR(255), 
	"ENTEREDTEXT" VARCHAR(255), 
	"ENTEREDUNITS" VARCHAR(255), 
	"OPERATORRULE" VARCHAR(255), 
	"TRANSFORMVALUE" VARCHAR(255), 
	"TRANSFORMDT" VARCHAR(255), 
	"TRANSFORMTEXT" VARCHAR(255), 
	"TRANSFORMRULE" VARCHAR, 
	"DISPLAYVALUE" VARCHAR(255), 
	"DISPLAYUNITS" VARCHAR(255), 
	"DISPLAYFORMAT" VARCHAR(255), 
	"ENTEREDOPERATOR" VARCHAR(255), 
	"ENTEREDQUALIFIER" VARCHAR(255), 
	"ENTRYSDCID" VARCHAR(255), 
	"ENTRYREFTYPEID" VARCHAR(255), 
	"CALCRULE" VARCHAR(max), 
	"MEASUREMENTACTIONID" VARCHAR(255), 
	"RELEASEDFLAG" VARCHAR(1), 
	"VALUESTATUS" VARCHAR(255), 
	"CONDITION" VARCHAR(255), 
	"TRANSFORMDEFERFLAG" VARCHAR(1), 
	"TEXTCOLOR" VARCHAR(255), 
	"USERSEQUENCE" VARCHAR(255), 
	"NOTES" VARCHAR(255), 
	"AUDITSEQUENCE" VARCHAR(255), 
	"TRACELOGID" VARCHAR(255), 
	"CREATEDT" VARCHAR(255), 
	"CREATEBY" VARCHAR(255), 
	"CREATETOOL" VARCHAR(255), 
	"MODDT" VARCHAR(255), 
	"MODBY" VARCHAR(255), 
	"S_ACOVERRIDDENFLAG" VARCHAR(1), 
	"MODTOOL" VARCHAR(255), 
	"S_ANALYSTID" VARCHAR(255), 
	"S_QCEVALSTATUS" VARCHAR(255), 
	"DISPLAYVALUEFORMAT" VARCHAR(255), 
	"CALCEXCLUDEFLAG" VARCHAR(1), 
	"SDIDATAITEMID" VARCHAR(255), 
	"INSTRUMENTID" VARCHAR(255), 
	"INSTRUMENTFIELDID" VARCHAR(255), 
	"ACTIVEFLAG" VARCHAR(1), 
	"EXTERNALREFERENCE" VARCHAR(255), 
	"RESULTTIMEOFFSET" VARCHAR(255), 
	"DEFAULTVALUE" VARCHAR(255), 
	"UNCERTAINTYVALUE" VARCHAR(255), 
	"UNCERTAINTYDISPLAYVALUE" VARCHAR(255), 
	"UNCERTAINTYASYMMETRICFLAG" VARCHAR(1), 
	"UNCERTAINTYVALUEUPPER" VARCHAR(255), 
	"UNCERTAINTYDISPLAYVALUEUPPER" VARCHAR(255), 
	"UNCERTAINTYFUNCTION" VARCHAR(255), 
	"UNCERTAINTYDISPLAYFORMAT" VARCHAR(255), 
	"UNCERTAINTYFUNCTIONUPPER" VARCHAR(255), 
	"UNCERTAINTYDISPLAYFORMATUPPER" VARCHAR(255), 
	"REPORTFLAG" VARCHAR(1), 
	"QCTRANSFERFLAG" VARCHAR(1), 
	"SLX_TASKID" VARCHAR(255), 
	"SLX_TASKVERSION" VARCHAR(255), 
	"SLX_RESULTVERSION" VARCHAR(255), 
	"SLX_ENTRYDATE" VARCHAR(255), 
	"SLX_REASON" VARCHAR(255), 
	"SLX_REPORT" VARCHAR(3), 
	"SLX_LIMITID" VARCHAR(255), 
	"SLX_SPECID" VARCHAR(255), 
	"SLX_SPECVERSION" VARCHAR(255), 
	"SLX_DETECTIONID" VARCHAR(255), 
	"SLX_INLIMIT" VARCHAR(3), 
	"SLX_INSPEC" VARCHAR(3), 
	"SLX_INDETECTION" VARCHAR(3), 
	"SLX_PLITEMATTRID" VARCHAR(255),
	inrt_dt timestamp      DEFAULT ('NOW'::character varying)::timestamp without time zone 
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560009, 'BHC_CPV_LAVAL.BS_LVL_GLIMS_S_BATCH', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_GLIMS_S_BATCH (
    row_id BIGINT  identity ,
	"S_BATCHID" VARCHAR(255)  , 
	"BATCHDESC" VARCHAR(255), 
	"CREATEDT" VARCHAR(255), 
	"BATCHDT" VARCHAR(255), 
	"CREATEBY" VARCHAR(255), 
	"BATCHSTATUS" VARCHAR(255), 
	"CREATETOOL" VARCHAR(255), 
	"MODDT" VARCHAR(255), 
	"MODBY" VARCHAR(255), 
	"MODTOOL" VARCHAR(255), 
	"NOTES" VARCHAR(255), 
	"AUDITSEQUENCE" VARCHAR(255), 
	"TRACELOGID" VARCHAR(255), 
	"USERSEQUENCE" VARCHAR(255), 
	"TEMPLATEFLAG" VARCHAR(1), 
	"PRODUCTID" VARCHAR(255), 
	"RELEASEDBY" VARCHAR(255), 
	"BATCHTYPE" VARCHAR(255), 
	"BATCHSIZE" VARCHAR(255), 
	"BATCHSIZEUNITS" VARCHAR(255), 
	"RECEIVEDDT" VARCHAR(255), 
	"RECEIVEDBY" VARCHAR(255), 
	"RELEASEDDT" VARCHAR(255), 
	"SUPPLIERADDRESSID" VARCHAR(255), 
	"MANUFACTUREDT" VARCHAR(255), 
	"SUPPLIERADDRESSTYPE" VARCHAR(255), 
	"PRODVARIANTLOTREFERENCE" VARCHAR(255), 
	"MANUFACTURERADDRESSID" VARCHAR(255), 
	"MANUFACTURERADDRESSTYPE" VARCHAR(255), 
	"LEVELID" VARCHAR(255), 
	"DISPOSITION" VARCHAR(255), 
	"PRODVARIANTID" VARCHAR(255), 
	"PRODUCTIONSITEADDRESSID" VARCHAR(255), 
	"PRODUCTIONSITEADDRESSTYPE" VARCHAR(255), 
	"SAMPLINGPLANID" VARCHAR(255), 
	"SAMPLINGPLANVERSIONID" VARCHAR(255), 
	"ACTIVEFLAG" VARCHAR(1), 
	"BATCHMODE" VARCHAR(255), 
	"CANCELLEDDT" VARCHAR(255), 
	"PRODUCTVERSIONID" VARCHAR(255), 
	"CANCELLEDBY" VARCHAR(255), 
	"EXPECTEDBATCHSIZE" VARCHAR(255), 
	"EXPECTEDBATCHSIZEUNITS" VARCHAR(255), 
	"HOLDDT" VARCHAR(255), 
	"HOLDBY" VARCHAR(255), 
	"EXPIRYDT" VARCHAR(255), 
	"MATERIALID" VARCHAR(255), 
	"SITEDEPARTMENTID" VARCHAR(255), 
	"SECURITYUSER" VARCHAR(255), 
	"SECURITYDEPARTMENT" VARCHAR(255), 
	"SLX_LOTNUMBER" VARCHAR(255), 
	"SLX_CUSTOMER" VARCHAR(255), 
	"SLX_QUANTITY" VARCHAR(255), 
	"SLX_ORDERNUMBER" VARCHAR(255), 
	"SLX_DUEDATE" VARCHAR(255), 
	"SLX_PRIORITY" VARCHAR(255), 
	"SLX_DISPOSITIONVALUE" VARCHAR(255), 
	"SLX_REASSAYINTERVAL" VARCHAR(255), 
	"SLX_REASSAYDATE" VARCHAR(255), 
	"SLX_EXPIRATIONINTERVAL" VARCHAR(255), 
	"SLX_ARCHIVEINTERVAL" VARCHAR(255), 
	"SLX_ARCHIVEDATE" VARCHAR(255),
	inrt_dt timestamp      DEFAULT ('NOW'::character varying)::timestamp without time zone 
);', 1, NULL, 'etluser', NULL, 'etluser', '');

INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560010, 'BHC_CPV_LAVAL.BS_LVL_GLIMS_S_SAMPLE', 'BASE_DDL', 'CREATE TABLE BHC_CPV_LAVAL.BS_LVL_GLIMS_S_SAMPLE (
    row_id BIGINT  identity ,
	"S_SAMPLEID" VARCHAR(255)  , 
	"SAMPLEDESC" VARCHAR(255), 
	"SAMPLETYPEID" VARCHAR(255), 
	"CREATEDT" VARCHAR(255), 
	"CREATEBY" VARCHAR(255), 
	"CREATETOOL" VARCHAR(255), 
	"MODDT" VARCHAR(255), 
	"MODBY" VARCHAR(255), 
	"SUBMITTERID" VARCHAR(255), 
	"MODTOOL" VARCHAR(255), 
	"SUBMITTEDDT" VARCHAR(255), 
	"NOTES" VARCHAR(255), 
	"AUDITSEQUENCE" VARCHAR(255), 
	"TRACELOGID" VARCHAR(255), 
	"USERSEQUENCE" VARCHAR(255), 
	"PRIORITY" VARCHAR(255), 
	"REVIEWREQUIREDFLAG" VARCHAR(1), 
	"DISPOSALSTATUS" VARCHAR(255), 
	"SAMPLESTATUS" VARCHAR(255), 
	"COLLECTIONDT" VARCHAR(255), 
	"RECEIVEDDT" VARCHAR(255), 
	"BATCHID" VARCHAR(255), 
	"PHYSICALCONDITION" VARCHAR(255), 
	"PRODUCTID" VARCHAR(255), 
	"PROJECTID" VARCHAR(255), 
	"SAMPLEPOINTID" VARCHAR(255), 
	"LOCATIONID" VARCHAR(255), 
	"REQUESTID" VARCHAR(255), 
	"STARTTESTINGDT" VARCHAR(255), 
	"COMPLETEDT" VARCHAR(255), 
	"DISPOSALDT" VARCHAR(255), 
	"DUEDT" VARCHAR(255), 
	"BASEDONSAMPLEID" VARCHAR(255), 
	"COLLECTEDBY" VARCHAR(255), 
	"TEMPLATEFLAG" VARCHAR(1), 
	"RECEIVEDBY" VARCHAR(255), 
	"DISPOSEDBY" VARCHAR(255), 
	"REVIEWEDBY" VARCHAR(255), 
	"REVIEWEDDT" VARCHAR(255), 
	"REVIEWDISPOSITION" VARCHAR(255), 
	"REVIEWREMARKS" VARCHAR(255), 
	"NUMBERLABELS" VARCHAR(255), 
	"CONTROLSUBSTANCEFLAG" VARCHAR(1), 
	"RECEIVEREQUIREDFLAG" VARCHAR(1), 
	"COCREQUIREDFLAG" VARCHAR(1), 
	"AUTORECEIVEFLAG" VARCHAR(1), 
	"EVENTDT" VARCHAR(255), 
	"AUTOFINALRPTFLAG" VARCHAR(1), 
	"EVENTPLAN" VARCHAR(255), 
	"STUDYID" VARCHAR(255), 
	"CONDITIONLABEL" VARCHAR(255), 
	"EVENTPLANITEM" VARCHAR(255), 
	"SAMPLEFAMILYID" VARCHAR(255), 
	"SCHEDULERULELABEL" VARCHAR(255), 
	"CONFIRMEDBY" VARCHAR(255), 
	"CONFIRMEDDT" VARCHAR(255), 
	"SSTUDYID" VARCHAR(255), 
	"POOLEDFLAG" VARCHAR(1), 
	"GLPFLAG" VARCHAR(1), 
	"COCFLAG" VARCHAR(1), 
	"RESTRICTIONSFLAG" VARCHAR(1), 
	"CONCENTRATION" VARCHAR(255), 
	"CONCENTRATIONUNITS" VARCHAR(255), 
	"STORAGESTATUS" VARCHAR(255), 
	"PREVIOUSSTORAGESTATUS" VARCHAR(255), 
	"DEVIATIONS" VARCHAR(255), 
	"TREATMENTS" VARCHAR(255), 
	"ALLOCATEDFORADDRESSID" VARCHAR(255), 
	"ALLOCATEDFORADDRESSTYPE" VARCHAR(255), 
	"ALLOCATEDFORDEPARTMENTID" VARCHAR(255), 
	"PREPTYPEID" VARCHAR(255), 
	"STORAGEDISPOSALSTATUS" VARCHAR(255), 
	"REAGENTLOTID" VARCHAR(255), 
	"QCSAMPLETYPE" VARCHAR(255), 
	"SPECIMENTYPE" VARCHAR(255), 
	"DISPOSALTARGETDT" VARCHAR(255), 
	"SOURCESPID" VARCHAR(255), 
	"SOURCESPVERSIONID" VARCHAR(255), 
	"SOURCESPLEVELID" VARCHAR(255), 
	"SOURCESPSOURCELABEL" VARCHAR(255), 
	"BATCHSTAGEID" VARCHAR(255), 
	"ACTIVEFLAG" VARCHAR(1), 
	"PRODUCTVERSIONID" VARCHAR(255), 
	"INSTRUMENTID" VARCHAR(255), 
	"WORKORDERID" VARCHAR(255), 
	"CLASSIFICATION" VARCHAR(255), 
	"SAMPLESUBTYPEID" VARCHAR(255), 
	"DUEDTOFFSET" VARCHAR(255), 
	"DUEDTOFFSETTIMEUNIT" VARCHAR(255), 
	"DUEDTOVERRIDEFLAG" VARCHAR(1), 
	"SOURCESDIWORKITEMID" VARCHAR(255), 
	"REQUESTITEMID" VARCHAR(255), 
	"REQUESTITEMDETAILID" VARCHAR(255), 
	"CANCELLEDDT" VARCHAR(255), 
	"CANCELLEDBY" VARCHAR(255), 
	"SDIWORKITEMCOMPLETIONSTATUS" VARCHAR(255), 
	"SCHEDULETEMPLATEFLAG" VARCHAR(1), 
	"EVENTNUM" VARCHAR(255), 
	"PROCESSINSTRUCTION" VARCHAR, 
	"PROCESSTYPE" VARCHAR(255), 
	"MONITORGROUPID" VARCHAR(255), 
	"LOCATIONPATH" VARCHAR(255), 
	"SAMPLEPOINTINSTANCE" VARCHAR(255), 
	"MATERIALID" VARCHAR(255), 
	"PROCESSINGSTARTDT" VARCHAR(255), 
	"PROCESSINGENDDT" VARCHAR(255), 
	"WAPSTATUS" VARCHAR(255), 
	"TESTINGDEPARTMENTID" VARCHAR(255), 
	"WORKAREADEPARTMENTID" VARCHAR(255), 
	"ASSIGNEDANALYSTID" VARCHAR(255), 
	"ASSIGNEDDEPARTMENTID" VARCHAR(255), 
	"SITEDEPARTMENTID" VARCHAR(255), 
	"PLANNEDSTARTDT" VARCHAR(255), 
	"SECURITYUSER" VARCHAR(255), 
	"SECURITYDEPARTMENT" VARCHAR(255), 
	"SLX_USERSAMPLEID" VARCHAR(255), 
	"SLX_SUPERVISOR" VARCHAR(255), 
	"SLX_SUBMITTER" VARCHAR(255), 
	"SLX_REQUESTER" VARCHAR(255), 
	"SLX_MATERIALID" VARCHAR(255), 
	"SLX_MATERIALTYPE" VARCHAR(255), 
	"SLX_MATERIALVERSIONID" VARCHAR(255), 
	"SLX_TEMPLATETYPE" VARCHAR(255), 
	"SLX_ROUTEID" VARCHAR(255), 
	"SLX_ROUTEVERSIONID" VARCHAR(255), 
	"SLX_SAMPLINGKITID" VARCHAR(255), 
	"SLX_SAMPLINGKITVERSIONID" VARCHAR(255), 
	"SLX_ORIGINALSAMPLEPLANID" VARCHAR(255), 
	"SLX_SAMPLEPLANNAME" VARCHAR(255), 
	"SLX_ORIGINALMATERIALID" VARCHAR(255),
	inrt_dt timestamp      DEFAULT ('NOW'::character varying)::timestamp without time zone 
);', 1, NULL, 'etluser', NULL, 'etluser', '');

--Stage Tables
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560011, 'BHC_CPV_LAVAL.STG_LVL_MARSXP_CO_SAMPLE_TEST_LG', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_MARSXP_CO_SAMPLE_TEST_LG;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560012, 'BHC_CPV_LAVAL.STG_LVL_MARSXP_CO_SAMPLE_TEST_LG', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_MARSXP_CO_SAMPLE_TEST_LG (
    ORDER_ID  ,
	BATCH_ID  ,
	LOT_ID  ,
	SAMPLE_PLAN_ID  ,
	SAMPLE_PLAN_VER  ,
	TEST_TYPE  ,
	REQUEST_TIME  ,
	REQUEST_BY  ,
	SAMP_PERFORMED_BY  ,
	SAMP_TIMESTAMP  ,
	SAMP_STATUS_TEXT  ,
	DATA_STATUS_TEXT  ,
	MEAN  ,
	"RANGE"  ,
	FAILED_RULES_FLAG ,
	PERFORMED_BY  ,
	CHECKED_BY  ,
	ENTRY_TIMESTAMP  ,
	TRACKING_ID  ,
	INDIV_SAMP_PROMPT  ,
	VALUE  ,
	REC_OPRN_ID  ,
	STAGE_ID  
	,cycl_time_id
	,scen_id 
	,inrt_by 
	,inrt_dt
  )
SELECT
  TRIM(ORDER_ID)  ,
	TRIM(BATCH_ID)  ,
	TRIM(LOT_ID)  ,
	TRIM(SAMPLE_PLAN_ID)  ,
	TRIM(SAMPLE_PLAN_VER)  ,
	TRIM(TEST_TYPE)  ,
	TRIM(REQUEST_TIME)  ,
	TRIM(REQUEST_BY)  ,
	TRIM(SAMP_PERFORMED_BY)  ,
	TRIM(SAMP_TIMESTAMP)  ,
	TRIM(SAMP_STATUS_TEXT)  ,
	TRIM(DATA_STATUS_TEXT)  ,
	TRIM(MEAN)  ,
	TRIM("RANGE")  ,
	TRIM(FAILED_RULES_FLAG) ,
	TRIM(PERFORMED_BY)  ,
	TRIM(CHECKED_BY)  ,
	TRIM(ENTRY_TIMESTAMP)  ,
	TRIM(TRACKING_ID)  ,
	TRIM(INDIV_SAMP_PROMPT)  ,
	TRIM(VALUE)  ,
	TRIM(REC_OPRN_ID)  ,
	TRIM(STAGE_ID),
  $cycl_time_id$,
  $scen_id$,
  ''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_MARSXP_CO_SAMPLE_TEST_LG base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_MARSXP_CO_SAMPLE_TEST_LG'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
 INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560013, 'BHC_CPV_LAVAL.STG_LVL_MARSXP_MM_MATERIAL_PLANT_SP', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_MARSXP_MM_MATERIAL_PLANT_SP;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560014, 'BHC_CPV_LAVAL.STG_LVL_MARSXP_MM_MATERIAL_PLANT_SP', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_MARSXP_MM_MATERIAL_PLANT_SP (
    PLANT_ID   ,
	MATERIAL_ID   ,
	MATERIAL_TYPE   ,
	INVENTORY_UOM   ,
	CONTAINER_TRACK   ,
	RECEIPT_CLASS   ,
	ROW_STATUS   ,
	MATERIAL_DESC   ,
	MATERIAL_LEVEL   ,
	PRODUCT_TYPE   ,
	SAFETY_ID   ,
	SAFETY_VER   ,
	MSDS_ID   ,
	MSDS_VER   ,
	RCV_QC_STATUS   ,
	RCV_QC_STATUS_ATTRIB   ,
	OBJ_CLASS   ,
	LAST_CHANGED_DATE  ,
	ISSUE_UOM   ,
	DISPENSE_TOLERANCE  ,
	INSTRUCTION ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM(PLANT_ID)   ,
	TRIM(MATERIAL_ID)   ,
	TRIM(MATERIAL_TYPE)   ,
	TRIM(INVENTORY_UOM)   ,
	TRIM(CONTAINER_TRACK)   ,
	TRIM(RECEIPT_CLASS)   ,
	TRIM(ROW_STATUS)   ,
	TRIM(MATERIAL_DESC)   ,
	TRIM(MATERIAL_LEVEL)   ,
	TRIM(PRODUCT_TYPE)   ,
	TRIM(SAFETY_ID)   ,
	TRIM(SAFETY_VER)   ,
	TRIM(MSDS_ID)   ,
	TRIM(MSDS_VER)   ,
	TRIM(RCV_QC_STATUS)   ,
	TRIM(RCV_QC_STATUS_ATTRIB)   ,
	TRIM(OBJ_CLASS)   ,
	CAST(TRIM(LAST_CHANGED_DATE) AS TIMESTAMP)  ,
	TRIM(ISSUE_UOM)   ,
	TRIM(DISPENSE_TOLERANCE)  ,
	TRIM(INSTRUCTION) ,
  $cycl_time_id$,
  $scen_id$,
  ''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_MARSXP_MM_MATERIAL_PLANT_SP base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_MARSXP_MM_MATERIAL_PLANT_SP'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560015, 'BHC_CPV_LAVAL.STG_LVL_MARSXP_PM_BATCH_ST', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_MARSXP_PM_BATCH_ST;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560016, 'BHC_CPV_LAVAL.STG_LVL_MARSXP_PM_BATCH_ST', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_MARSXP_PM_BATCH_ST (
    ORDER_ID   ,
	BATCH_ID   ,
	RECIPE_ID   ,
	RECIPE_VER   ,
	BATCH_PROD_ID   ,
	BATCH_PROD_QTY  ,
	BATCH_PROD_UOM   ,
	BATCH_FACTOR  ,
	BATCH_STATUS   ,
	OSV_ID   ,
	LSV_ID   ,
	DISPENSE_STATUS   ,
	MATERIAL_STATUS   ,
	MATL_STAGING_STATUS   ,
	BATCH_PROD_DESC   ,
	SCHED_BEGIN_TIME   ,
	SCHED_END_TIME   ,
	ACTUAL_BEGIN_TIME   ,
	ACTUAL_END_TIME   ,
	LABEL_PRINTED ,
	ALLOCATION_STATUS   ,
	SCHED_BEGIN_DISPENSE   ,
	DISPENSE_KIT_STATUS   ,
	BATCH_SEQ ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM(ORDER_ID)   ,
	TRIM(BATCH_ID)   ,
	TRIM(RECIPE_ID)   ,
	TRIM(RECIPE_VER)   ,
	TRIM(BATCH_PROD_ID)   ,
	TRIM(BATCH_PROD_QTY)  ,
	TRIM(BATCH_PROD_UOM)   ,
	TRIM(BATCH_FACTOR)  ,
	TRIM(BATCH_STATUS)   ,
	TRIM(OSV_ID)   ,
	TRIM(LSV_ID)   ,
	TRIM(DISPENSE_STATUS)   ,
	TRIM(MATERIAL_STATUS)   ,
	TRIM(MATL_STAGING_STATUS)   ,
	TRIM(BATCH_PROD_DESC)   ,
	CAST(TRIM(SCHED_BEGIN_TIME) AS TIMESTAMP)   ,
	CAST(TRIM(SCHED_END_TIME) AS TIMESTAMP)   ,
	CAST(TRIM(ACTUAL_BEGIN_TIME) AS TIMESTAMP)   ,
	CAST(TRIM(ACTUAL_END_TIME) AS TIMESTAMP)   ,
	TRIM(LABEL_PRINTED) ,
	TRIM(ALLOCATION_STATUS)   ,
	CAST(TRIM(SCHED_BEGIN_DISPENSE) AS TIMESTAMP)   ,
	TRIM(DISPENSE_KIT_STATUS)   ,
	TRIM(BATCH_SEQ) ,
  $cycl_time_id$,
  $scen_id$,
  ''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_MARSXP_PM_BATCH_ST base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_MARSXP_PM_BATCH_ST'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560017, 'BHC_CPV_LAVAL.STG_LVL_CSP_CSP_ACTIONS', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_CSP_CSP_ACTIONS;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560018, 'BHC_CPV_LAVAL.STG_LVL_CSP_CSP_ACTIONS', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_CSP_CSP_ACTIONS (
    NO_ACTION ,
	NO_LOT ,
	NO_PRODUIT ,
	NO_TYPE ,
	NO_GAME ,
	NO_SUBLOT ,
	SUB_MEAN ,
	SUB_COUNT ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM(NO_ACTION) ,
	TRIM(NO_LOT) ,
	TRIM(NO_PRODUIT) ,
	TRIM(NO_TYPE) ,
	TRIM(NO_GAME) ,
	TRIM(NO_SUBLOT) ,
	TRIM(SUB_MEAN) ,
	TRIM(SUB_COUNT) ,
  $cycl_time_id$,
  $scen_id$,
  ''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_CSP_CSP_ACTIONS base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_CSP_CSP_ACTIONS'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560019, 'BHC_CPV_LAVAL.STG_LVL_CSP_CSP_LIEN_PRODUITS_LOTS', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_CSP_CSP_LIEN_PRODUITS_LOTS;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560020, 'BHC_CPV_LAVAL.STG_LVL_CSP_CSP_LIEN_PRODUITS_LOTS', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_CSP_CSP_LIEN_PRODUITS_LOTS (
    NO_LOT,
	NO_PRODUIT,
	IS_CLOSED ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM(NO_LOT),
	TRIM(NO_PRODUIT),
	TRIM(IS_CLOSED) ,
  $cycl_time_id$,
  $scen_id$,
  ''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_CSP_CSP_LIEN_PRODUITS_LOTS base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_CSP_CSP_LIEN_PRODUITS_LOTS'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560021, 'BHC_CPV_LAVAL.STG_LVL_CSP_CSP_VALEURS', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_CSP_CSP_VALEURS;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560022, 'BHC_CPV_LAVAL.STG_LVL_CSP_CSP_VALEURS', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_CSP_CSP_VALEURS (
    NO_VALEUR ,
	NO_ACTION ,
	VALEUR ,
	NO_SUBGRP ,
	USER_NAME ,
	DATE_TIME ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM(NO_VALEUR) ,
	TRIM(NO_ACTION) ,
	TRIM(VALEUR) ,
	TRIM(NO_SUBGRP) ,
	TRIM(USER_NAME) ,
	CAST(TRIM(DATE_TIME) AS TIMESTAMP) ,
  $cycl_time_id$,
  $scen_id$,
  ''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_CSP_CSP_VALEURS base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_CSP_CSP_VALEURS'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560023, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATA', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATA;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560024, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATA', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATA (
    	"SDCID"   , 
	"KEYID1"   , 
	"KEYID2"   , 
	"KEYID3"   , 
	"PARAMLISTID"   , 
	"PARAMLISTVERSIONID"   , 
	"VARIANTID"   , 
	"DATASET"   , 
	"LIMITRULEID" , 
	"LIMITRULEVERSIONID" , 
	"MODIFIABLEFLAG" , 
	"APPROVALSEQUENCEFLAG" , 
	"APPROVALPASSRULE" , 
	"CONDITION" , 
	"AVAILABILITYFLAG" , 
	"USERSEQUENCE" , 
	"NOTES" , 
	"AUDITSEQUENCE" , 
	"TRACELOGID" , 
	"CREATEDT" , 
	"CREATEBY" , 
	"CREATETOOL" , 
	"MODDT" , 
	"MODBY" , 
	"S_DATASETSTATUS" , 
	"MODTOOL" , 
	"S_NOTEBOOKREFERENCE" , 
	"S_ASSIGNEDANALYST" , 
	"S_INSTRUMENTID" , 
	"S_RETESTEDFLAG" , 
	"S_ICOVERRIDDENFLAG" , 
	"S_REMEASUREDFLAG" , 
	"S_REMEASUREINSTANCE" , 
	"S_QCBATCHID" , 
	"S_QCBATCHITEMID" , 
	"TRACKITEMID" , 
	"SCHEDULEPLANID" , 
	"SCHEDULEPLANITEMID" , 
	"UNIQUENESSFLAG" , 
	"APPROVALFLAG" , 
	"SDIDATAID" , 
	"SOURCEWORKITEMID" , 
	"SOURCEWORKITEMINSTANCE" , 
	"S_CANCELLABLEFLAG" , 
	"DOCUMENTID" , 
	"DOCUMENTVERSIONID" , 
	"BLOCKFLAG" , 
	"ACTIVEFLAG" , 
	"S_ASSIGNEDDEPARTMENT" , 
	"S_INSTRUMENTUSEDFLAG" , 
	"ARRAYMETHODID" , 
	"ARRAYMETHODVERSIONID" , 
	"COMPLETEDDT" , 
	"COMPLETEDBY" , 
	"ARRAYMETHODINSTANCE" , 
	"STARTEDDT" , 
	"ARRAYMETHODREVIEWDISPOSITION" , 
	"STARTEDBY" , 
	"CANCELLEDDT" , 
	"CANCELLEDBY" , 
	"ACCREDITEDFLAG" , 
	"WAPSTATUS" , 
	"TESTINGDEPARTMENTID" , 
	"WORKAREADEPARTMENTID" , 
	"PLANNEDSTARTDT" , 
	"SECURITYUSER" , 
	"SECURITYDEPARTMENT" , 
	"SLX_ORIGINALOPERATIONNAME" , 
	"SLX_ORIGINALOPERATIONID" , 
	"SLX_TASKPARENTID" , 
	"SLX_SUPERVISOR", 
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM("SDCID")   , 
	TRIM("KEYID1")   , 
	TRIM("KEYID2")   , 
	TRIM("KEYID3")   , 
	TRIM("PARAMLISTID")   , 
	TRIM("PARAMLISTVERSIONID")   , 
	TRIM("VARIANTID")   , 
	CAST(TRIM("DATASET") AS INTEGER)  , 
	TRIM("LIMITRULEID") , 
	TRIM("LIMITRULEVERSIONID") , 
	TRIM("MODIFIABLEFLAG") , 
	TRIM("APPROVALSEQUENCEFLAG") , 
	TRIM("APPROVALPASSRULE") , 
	TRIM("CONDITION") , 
	TRIM("AVAILABILITYFLAG") , 
	CAST(TRIM("USERSEQUENCE") AS INTEGER), 
	TRIM("NOTES"), 
	CAST(TRIM("AUDITSEQUENCE") AS INTEGER), 
	TRIM("TRACELOGID") , 
	CAST(TRIM("CREATEDT") AS TIMESTAMP), 
	TRIM("CREATEBY") , 
	TRIM("CREATETOOL") , 
	CAST(TRIM("MODDT") AS TIMESTAMP), 
	TRIM("MODBY") , 
	TRIM("S_DATASETSTATUS") , 
	TRIM("MODTOOL") , 
	TRIM("S_NOTEBOOKREFERENCE") , 
	TRIM("S_ASSIGNEDANALYST") , 
	TRIM("S_INSTRUMENTID") , 
	TRIM("S_RETESTEDFLAG") , 
	TRIM("S_ICOVERRIDDENFLAG") , 
	TRIM("S_REMEASUREDFLAG") , 
	CAST(TRIM("S_REMEASUREINSTANCE") AS INTEGER), 
	TRIM("S_QCBATCHID") , 
	TRIM("S_QCBATCHITEMID") , 
	TRIM("TRACKITEMID") , 
	TRIM("SCHEDULEPLANID") , 
	TRIM("SCHEDULEPLANITEMID") , 
	TRIM("UNIQUENESSFLAG") , 
	TRIM("APPROVALFLAG") , 
	TRIM("SDIDATAID") , 
	TRIM("SOURCEWORKITEMID") , 
	CAST(TRIM("SOURCEWORKITEMINSTANCE") AS INTEGER), 
	TRIM("S_CANCELLABLEFLAG") , 
	TRIM("DOCUMENTID") , 
	TRIM("DOCUMENTVERSIONID") , 
	TRIM("BLOCKFLAG") , 
	TRIM("ACTIVEFLAG") , 
	TRIM("S_ASSIGNEDDEPARTMENT") , 
	TRIM("S_INSTRUMENTUSEDFLAG") , 
	TRIM("ARRAYMETHODID") , 
	TRIM("ARRAYMETHODVERSIONID") , 
	CAST(TRIM("COMPLETEDDT") AS TIMESTAMP), 
	TRIM("COMPLETEDBY") , 
	CAST(TRIM("ARRAYMETHODINSTANCE") AS INTEGER), 
	CAST(TRIM("STARTEDDT") AS TIMESTAMP), 
	TRIM("ARRAYMETHODREVIEWDISPOSITION") , 
	TRIM("STARTEDBY") , 
	CAST(TRIM("CANCELLEDDT") AS TIMESTAMP), 
	TRIM("CANCELLEDBY") , 
	TRIM("ACCREDITEDFLAG") , 
	TRIM("WAPSTATUS") , 
	TRIM("TESTINGDEPARTMENTID") , 
	TRIM("WORKAREADEPARTMENTID") , 
	CAST(TRIM("PLANNEDSTARTDT") AS TIMESTAMP), 
	TRIM("SECURITYUSER") , 
	TRIM("SECURITYDEPARTMENT") , 
	TRIM("SLX_ORIGINALOPERATIONNAME") , 
	TRIM("SLX_ORIGINALOPERATIONID"), 
	TRIM("SLX_TASKPARENTID"), 
	TRIM("SLX_SUPERVISOR") ,
	$cycl_time_id$,
	$scen_id$,
	''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATA base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATA'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560025, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATAITEM', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATAITEM;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560026, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATAITEM', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_GLIMS_SDIDATAITEM (
    "SDCID"   , 
	"KEYID1"   , 
	"KEYID2"   , 
	"KEYID3"   , 
	"PARAMLISTID"   , 
	"PARAMLISTVERSIONID"   , 
	"VARIANTID"   , 
	"DATASET"   , 
	"PARAMID"   , 
	"PARAMTYPE"   , 
	"REPLICATEID"   , 
	"ALIASID" , 
	"MANDATORYFLAG" , 
	"DATATYPES" , 
	"ENTEREDVALUE" , 
	"ENTEREDTEXT" , 
	"ENTEREDUNITS" , 
	"OPERATORRULE" , 
	"TRANSFORMVALUE" , 
	"TRANSFORMDT" , 
	"TRANSFORMTEXT" , 
	"TRANSFORMRULE" , 
	"DISPLAYVALUE" , 
	"DISPLAYUNITS" , 
	"DISPLAYFORMAT" , 
	"ENTEREDOPERATOR" , 
	"ENTEREDQUALIFIER" , 
	"ENTRYSDCID" , 
	"ENTRYREFTYPEID" , 
	"CALCRULE" , 
	"MEASUREMENTACTIONID" , 
	"RELEASEDFLAG" , 
	"VALUESTATUS" , 
	"CONDITION" , 
	"TRANSFORMDEFERFLAG" , 
	"TEXTCOLOR" , 
	"USERSEQUENCE" , 
	"NOTES" , 
	"AUDITSEQUENCE" , 
	"TRACELOGID" , 
	"CREATEDT" , 
	"CREATEBY" , 
	"CREATETOOL" , 
	"MODDT" , 
	"MODBY" , 
	"S_ACOVERRIDDENFLAG" , 
	"MODTOOL" , 
	"S_ANALYSTID" , 
	"S_QCEVALSTATUS" , 
	"DISPLAYVALUEFORMAT" , 
	"CALCEXCLUDEFLAG" , 
	"SDIDATAITEMID" , 
	"INSTRUMENTID" , 
	"INSTRUMENTFIELDID" , 
	"ACTIVEFLAG" , 
	"EXTERNALREFERENCE" , 
	"RESULTTIMEOFFSET" , 
	"DEFAULTVALUE" , 
	"UNCERTAINTYVALUE" , 
	"UNCERTAINTYDISPLAYVALUE" , 
	"UNCERTAINTYASYMMETRICFLAG" , 
	"UNCERTAINTYVALUEUPPER" , 
	"UNCERTAINTYDISPLAYVALUEUPPER" , 
	"UNCERTAINTYFUNCTION" , 
	"UNCERTAINTYDISPLAYFORMAT" , 
	"UNCERTAINTYFUNCTIONUPPER" , 
	"UNCERTAINTYDISPLAYFORMATUPPER" , 
	"REPORTFLAG" , 
	"QCTRANSFERFLAG" , 
	"SLX_TASKID" , 
	"SLX_TASKVERSION" , 
	"SLX_RESULTVERSION" , 
	"SLX_ENTRYDATE" , 
	"SLX_REASON" , 
	"SLX_REPORT" , 
	"SLX_LIMITID" , 
	"SLX_SPECID" , 
	"SLX_SPECVERSION" , 
	"SLX_DETECTIONID" , 
	"SLX_INLIMIT" , 
	"SLX_INSPEC" , 
	"SLX_INDETECTION" , 
	"SLX_PLITEMATTRID",
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM("SDCID")   , 
	TRIM("KEYID1")   , 
	TRIM("KEYID2")   , 
	TRIM("KEYID3")   , 
	TRIM("PARAMLISTID")   , 
	TRIM("PARAMLISTVERSIONID")   , 
	TRIM("VARIANTID")   , 
	CAST(TRIM("DATASET") AS INTEGER), 
	TRIM("PARAMID")   , 
	TRIM("PARAMTYPE")   , 
	CAST(TRIM("REPLICATEID") AS INTEGER)  , 
	TRIM("ALIASID") , 
	TRIM("MANDATORYFLAG") , 
	TRIM("DATATYPES"), 
	CAST(TRIM("ENTEREDVALUE") AS INTEGER), 
	TRIM("ENTEREDTEXT") , 
	TRIM("ENTEREDUNITS") , 
	TRIM("OPERATORRULE") , 
	CAST(TRIM("TRANSFORMVALUE") AS INTEGER), 
	CAST(TRIM("TRANSFORMDT") AS TIMESTAMP), 
	TRIM("TRANSFORMTEXT") , 
	TRIM("TRANSFORMRULE") , 
	TRIM("DISPLAYVALUE") , 
	TRIM("DISPLAYUNITS") , 
	TRIM("DISPLAYFORMAT") , 
	TRIM("ENTEREDOPERATOR") , 
	TRIM("ENTEREDQUALIFIER") , 
	TRIM("ENTRYSDCID") , 
	TRIM("ENTRYREFTYPEID") , 
	TRIM("CALCRULE") , 
	TRIM("MEASUREMENTACTIONID") , 
	TRIM("RELEASEDFLAG") , 
	TRIM("VALUESTATUS") , 
	TRIM("CONDITION") , 
	TRIM("TRANSFORMDEFERFLAG") , 
	CAST(TRIM("TEXTCOLOR") AS INTEGER), 
	CAST(TRIM("USERSEQUENCE") AS INTEGER), 
	TRIM("NOTES") , 
	CAST(TRIM("AUDITSEQUENCE") AS INTEGER), 
	TRIM("TRACELOGID") , 
	CAST(TRIM("CREATEDT") AS TIMESTAMP), 
	TRIM("CREATEBY") , 
	TRIM("CREATETOOL"), 
	CAST(TRIM("MODDT") AS TIMESTAMP), 
	TRIM("MODBY") , 
	TRIM("S_ACOVERRIDDENFLAG") , 
	TRIM("MODTOOL") , 
	TRIM("S_ANALYSTID") , 
	TRIM("S_QCEVALSTATUS") , 
	TRIM("DISPLAYVALUEFORMAT") , 
	TRIM("CALCEXCLUDEFLAG") , 
	TRIM("SDIDATAITEMID") , 
	TRIM("INSTRUMENTID") , 
	TRIM("INSTRUMENTFIELDID") , 
	TRIM("ACTIVEFLAG") , 
	TRIM("EXTERNALREFERENCE") , 
	CAST(TRIM("RESULTTIMEOFFSET") AS INTEGER), 
	TRIM("DEFAULTVALUE") , 
	CAST(TRIM("UNCERTAINTYVALUE") AS INTEGER), 
	TRIM("UNCERTAINTYDISPLAYVALUE") , 
	TRIM("UNCERTAINTYASYMMETRICFLAG") , 
	CAST(TRIM("UNCERTAINTYVALUEUPPER") AS INTEGER), 
	TRIM("UNCERTAINTYDISPLAYVALUEUPPER") , 
	TRIM("UNCERTAINTYFUNCTION") , 
	TRIM("UNCERTAINTYDISPLAYFORMAT") , 
	TRIM("UNCERTAINTYFUNCTIONUPPER") , 
	TRIM("UNCERTAINTYDISPLAYFORMATUPPER") , 
	TRIM("REPORTFLAG") , 
	TRIM("QCTRANSFERFLAG") , 
	TRIM("SLX_TASKID"), 
	TRIM("SLX_TASKVERSION"), 
	TRIM("SLX_RESULTVERSION"), 
	CAST(TRIM("SLX_ENTRYDATE") AS TIMESTAMP), 
	TRIM("SLX_REASON") , 
	TRIM("SLX_REPORT") , 
	TRIM("SLX_LIMITID"), 
	CAST(TRIM("SLX_SPECID") AS INTEGER), 
	TRIM("SLX_SPECVERSION"), 
	CAST(TRIM("SLX_DETECTIONID") AS INTEGER), 
	TRIM("SLX_INLIMIT") , 
	TRIM("SLX_INSPEC") , 
	TRIM("SLX_INDETECTION") , 
	TRIM("SLX_PLITEMATTRID") ,
	$cycl_time_id$,
	$scen_id$,
	''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATAITEM base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_GLIMS_SDIDATAITEM'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560027, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_S_BATCH', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_GLIMS_S_BATCH;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560028, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_S_BATCH', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_GLIMS_S_BATCH (
    "S_BATCHID"   , 
	"BATCHDESC" , 
	"CREATEDT" , 
	"BATCHDT" , 
	"CREATEBY" , 
	"BATCHSTATUS" , 
	"CREATETOOL" , 
	"MODDT" , 
	"MODBY" , 
	"MODTOOL" , 
	"NOTES" , 
	"AUDITSEQUENCE" , 
	"TRACELOGID" , 
	"USERSEQUENCE" , 
	"TEMPLATEFLAG" , 
	"PRODUCTID" , 
	"RELEASEDBY" , 
	"BATCHTYPE" , 
	"BATCHSIZE" , 
	"BATCHSIZEUNITS" , 
	"RECEIVEDDT" , 
	"RECEIVEDBY" , 
	"RELEASEDDT" , 
	"SUPPLIERADDRESSID" , 
	"MANUFACTUREDT" , 
	"SUPPLIERADDRESSTYPE" , 
	"PRODVARIANTLOTREFERENCE" , 
	"MANUFACTURERADDRESSID" , 
	"MANUFACTURERADDRESSTYPE" , 
	"LEVELID" , 
	"DISPOSITION" , 
	"PRODVARIANTID" , 
	"PRODUCTIONSITEADDRESSID" , 
	"PRODUCTIONSITEADDRESSTYPE" , 
	"SAMPLINGPLANID" , 
	"SAMPLINGPLANVERSIONID" , 
	"ACTIVEFLAG" , 
	"BATCHMODE" , 
	"CANCELLEDDT" , 
	"PRODUCTVERSIONID" , 
	"CANCELLEDBY" , 
	"EXPECTEDBATCHSIZE" , 
	"EXPECTEDBATCHSIZEUNITS" , 
	"HOLDDT" , 
	"HOLDBY" , 
	"EXPIRYDT" , 
	"MATERIALID" , 
	"SITEDEPARTMENTID" , 
	"SECURITYUSER" , 
	"SECURITYDEPARTMENT" , 
	"SLX_LOTNUMBER" , 
	"SLX_CUSTOMER" , 
	"SLX_QUANTITY" , 
	"SLX_ORDERNUMBER" , 
	"SLX_DUEDATE" , 
	"SLX_PRIORITY" , 
	"SLX_DISPOSITIONVALUE" , 
	"SLX_REASSAYINTERVAL" , 
	"SLX_REASSAYDATE" , 
	"SLX_EXPIRATIONINTERVAL" , 
	"SLX_ARCHIVEINTERVAL" , 
	"SLX_ARCHIVEDATE" ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM("S_BATCHID")   , 
	TRIM("BATCHDESC") , 
	CAST(TRIM("CREATEDT") AS TIMESTAMP), 
	CAST(TRIM("BATCHDT") AS TIMESTAMP), 
	TRIM("CREATEBY") , 
	TRIM("BATCHSTATUS") , 
	TRIM("CREATETOOL") , 
	CAST(TRIM("MODDT") AS TIMESTAMP), 
	TRIM("MODBY") , 
	TRIM("MODTOOL") , 
	TRIM("NOTES") , 
	TRIM("AUDITSEQUENCE"), 
	TRIM("TRACELOGID") , 
	CAST(TRIM("USERSEQUENCE") AS INTEGER), 
	TRIM("TEMPLATEFLAG") , 
	TRIM("PRODUCTID") , 
	TRIM("RELEASEDBY") , 
	TRIM("BATCHTYPE") , 
	CAST(TRIM("BATCHSIZE") AS INTEGER), 
	TRIM("BATCHSIZEUNITS") , 
	CAST(TRIM("RECEIVEDDT") AS TIMESTAMP), 
	TRIM("RECEIVEDBY") , 
	CAST(TRIM("RELEASEDDT") AS TIMESTAMP), 
	TRIM("SUPPLIERADDRESSID") , 
	CAST(TRIM("MANUFACTUREDT") AS TIMESTAMP), 
	TRIM("SUPPLIERADDRESSTYPE") , 
	TRIM("PRODVARIANTLOTREFERENCE") , 
	TRIM("MANUFACTURERADDRESSID") , 
	TRIM("MANUFACTURERADDRESSTYPE") , 
	TRIM("LEVELID") , 
	TRIM("DISPOSITION") , 
	TRIM("PRODVARIANTID") , 
	TRIM("PRODUCTIONSITEADDRESSID") , 
	TRIM("PRODUCTIONSITEADDRESSTYPE") , 
	TRIM("SAMPLINGPLANID") , 
	TRIM("SAMPLINGPLANVERSIONID") , 
	TRIM("ACTIVEFLAG") , 
	TRIM("BATCHMODE") , 
	CAST(TRIM("CANCELLEDDT") AS TIMESTAMP), 
	TRIM("PRODUCTVERSIONID") , 
	TRIM("CANCELLEDBY") , 
	CAST(TRIM("EXPECTEDBATCHSIZE") As INTEGER), 
	TRIM("EXPECTEDBATCHSIZEUNITS") , 
	CAST(TRIM("HOLDDT") AS TIMESTAMP), 
	TRIM("HOLDBY"), 
	CAST(TRIM("EXPIRYDT") AS TIMESTAMP), 
	TRIM("MATERIALID") , 
	TRIM("SITEDEPARTMENTID") , 
	TRIM("SECURITYUSER") , 
	TRIM("SECURITYDEPARTMENT") , 
	TRIM("SLX_LOTNUMBER") , 
	CAST(TRIM("SLX_CUSTOMER") AS DECIMAL) , 
	TRIM("SLX_QUANTITY") , 
	TRIM("SLX_ORDERNUMBER") , 
	CAST(TRIM("SLX_DUEDATE") AS TIMESTAMP), 
	TRIM("SLX_PRIORITY"), 
	TRIM("SLX_DISPOSITIONVALUE") , 
	CAST(TRIM("SLX_REASSAYINTERVAL") AS INTEGER), 
	CAST(TRIM("SLX_REASSAYDATE") AS TIMESTAMP), 
	CAST(TRIM("SLX_EXPIRATIONINTERVAL") AS INTEGER), 
	CAST(TRIM("SLX_ARCHIVEINTERVAL") AS INTEGER), 
	CAST(TRIM("SLX_ARCHIVEDATE") AS TIMESTAMP),
	$cycl_time_id$,
	$scen_id$,
	''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_GLIMS_S_BATCH base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_GLIMS_S_BATCH'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');
  
  
  
  
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560029, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_S_SAMPLE', 'STAGE_INSERT', 'truncate table BHC_CPV_LAVAL.STG_LVL_GLIMS_S_SAMPLE;', 1, NULL, 'etluser', NULL, 'etluser', '');
INSERT INTO comm_ops.cntl_etl_sql
(sql_id, tbl_nm, sql_type, sql_txt, actv_flg, inrt_dt, inrt_by, modf_dt, modf_by, cmt)
VALUES(560030, 'BHC_CPV_LAVAL.STG_LVL_GLIMS_S_SAMPLE', 'STAGE_INSERT', 'INSERT INTO
  BHC_CPV_LAVAL.STG_LVL_GLIMS_S_SAMPLE (
    "S_SAMPLEID"   , 
	"SAMPLEDESC" , 
	"SAMPLETYPEID" , 
	"CREATEDT" , 
	"CREATEBY" , 
	"CREATETOOL" , 
	"MODDT" , 
	"MODBY" , 
	"SUBMITTERID" , 
	"MODTOOL" , 
	"SUBMITTEDDT" , 
	"NOTES" , 
	"AUDITSEQUENCE" , 
	"TRACELOGID" , 
	"USERSEQUENCE" , 
	"PRIORITY" , 
	"REVIEWREQUIREDFLAG" , 
	"DISPOSALSTATUS" , 
	"SAMPLESTATUS" , 
	"COLLECTIONDT" , 
	"RECEIVEDDT" , 
	"BATCHID" , 
	"PHYSICALCONDITION" , 
	"PRODUCTID" , 
	"PROJECTID" , 
	"SAMPLEPOINTID" , 
	"LOCATIONID" , 
	"REQUESTID" , 
	"STARTTESTINGDT" , 
	"COMPLETEDT" , 
	"DISPOSALDT" , 
	"DUEDT" , 
	"BASEDONSAMPLEID" , 
	"COLLECTEDBY" , 
	"TEMPLATEFLAG" , 
	"RECEIVEDBY" , 
	"DISPOSEDBY" , 
	"REVIEWEDBY" , 
	"REVIEWEDDT" , 
	"REVIEWDISPOSITION" , 
	"REVIEWREMARKS" , 
	"NUMBERLABELS" , 
	"CONTROLSUBSTANCEFLAG" , 
	"RECEIVEREQUIREDFLAG" , 
	"COCREQUIREDFLAG" , 
	"AUTORECEIVEFLAG" , 
	"EVENTDT" , 
	"AUTOFINALRPTFLAG" , 
	"EVENTPLAN" , 
	"STUDYID" , 
	"CONDITIONLABEL" , 
	"EVENTPLANITEM" , 
	"SAMPLEFAMILYID" , 
	"SCHEDULERULELABEL" , 
	"CONFIRMEDBY" , 
	"CONFIRMEDDT" , 
	"SSTUDYID" , 
	"POOLEDFLAG" , 
	"GLPFLAG" , 
	"COCFLAG" , 
	"RESTRICTIONSFLAG" , 
	"CONCENTRATION" , 
	"CONCENTRATIONUNITS" , 
	"STORAGESTATUS" , 
	"PREVIOUSSTORAGESTATUS" , 
	"DEVIATIONS" , 
	"TREATMENTS" , 
	"ALLOCATEDFORADDRESSID" , 
	"ALLOCATEDFORADDRESSTYPE" , 
	"ALLOCATEDFORDEPARTMENTID" , 
	"PREPTYPEID" , 
	"STORAGEDISPOSALSTATUS" , 
	"REAGENTLOTID" , 
	"QCSAMPLETYPE" , 
	"SPECIMENTYPE" , 
	"DISPOSALTARGETDT" , 
	"SOURCESPID" , 
	"SOURCESPVERSIONID" , 
	"SOURCESPLEVELID" , 
	"SOURCESPSOURCELABEL" , 
	"BATCHSTAGEID" , 
	"ACTIVEFLAG" , 
	"PRODUCTVERSIONID" , 
	"INSTRUMENTID" , 
	"WORKORDERID" , 
	"CLASSIFICATION" , 
	"SAMPLESUBTYPEID" , 
	"DUEDTOFFSET" , 
	"DUEDTOFFSETTIMEUNIT" , 
	"DUEDTOVERRIDEFLAG" , 
	"SOURCESDIWORKITEMID" , 
	"REQUESTITEMID" , 
	"REQUESTITEMDETAILID" , 
	"CANCELLEDDT" , 
	"CANCELLEDBY" , 
	"SDIWORKITEMCOMPLETIONSTATUS" , 
	"SCHEDULETEMPLATEFLAG" , 
	"EVENTNUM" , 
	"PROCESSINSTRUCTION" , 
	"PROCESSTYPE" , 
	"MONITORGROUPID" , 
	"LOCATIONPATH" , 
	"SAMPLEPOINTINSTANCE" , 
	"MATERIALID" , 
	"PROCESSINGSTARTDT" , 
	"PROCESSINGENDDT" , 
	"WAPSTATUS" , 
	"TESTINGDEPARTMENTID" , 
	"WORKAREADEPARTMENTID" , 
	"ASSIGNEDANALYSTID" , 
	"ASSIGNEDDEPARTMENTID" , 
	"SITEDEPARTMENTID" , 
	"PLANNEDSTARTDT" , 
	"SECURITYUSER" , 
	"SECURITYDEPARTMENT" , 
	"SLX_USERSAMPLEID" , 
	"SLX_SUPERVISOR" , 
	"SLX_SUBMITTER" , 
	"SLX_REQUESTER" , 
	"SLX_MATERIALID" , 
	"SLX_MATERIALTYPE" , 
	"SLX_MATERIALVERSIONID" , 
	"SLX_TEMPLATETYPE" , 
	"SLX_ROUTEID" , 
	"SLX_ROUTEVERSIONID" , 
	"SLX_SAMPLINGKITID" , 
	"SLX_SAMPLINGKITVERSIONID" , 
	"SLX_ORIGINALSAMPLEPLANID" , 
	"SLX_SAMPLEPLANNAME" , 
	"SLX_ORIGINALMATERIALID" ,
	cycl_time_id,
	scen_id,        
	inrt_by,        
	inrt_dt
  )
SELECT
    TRIM("S_SAMPLEID")   , 
	TRIM("SAMPLEDESC") , 
	TRIM("SAMPLETYPEID") , 
	CAST(TRIM("CREATEDT") AS TIMESTAMP), 
	TRIM("CREATEBY") , 
	TRIM("CREATETOOL") , 
	CAST(TRIM("MODDT") AS TIMESTAMP), 
	TRIM("MODBY") , 
	TRIM("SUBMITTERID") , 
	TRIM("MODTOOL") , 
	CAST(TRIM("SUBMITTEDDT") AS TIMESTAMP), 
	TRIM("NOTES") , 
	CAST(TRIM("AUDITSEQUENCE") AS INTEGER), 
	TRIM("TRACELOGID") , 
	CAST(TRIM("USERSEQUENCE") AS INTEGER), 
	TRIM("PRIORITY") , 
	TRIM("REVIEWREQUIREDFLAG") , 
	TRIM("DISPOSALSTATUS") , 
	TRIM("SAMPLESTATUS") , 
	CAST(TRIM("COLLECTIONDT") AS TIMESTAMP), 
	CAST(TRIM("RECEIVEDDT") AS TIMESTAMP), 
	TRIM("BATCHID") , 
	TRIM("PHYSICALCONDITION") , 
	TRIM("PRODUCTID") , 
	TRIM("PROJECTID") , 
	TRIM("SAMPLEPOINTID") , 
	TRIM("LOCATIONID") , 
	TRIM("REQUESTID") , 
	CAST(TRIM("STARTTESTINGDT") AS TIMESTAMP), 
	CAST(TRIM("COMPLETEDT") AS TIMESTAMP), 
	CAST(TRIM("DISPOSALDT") AS TIMESTAMP), 
	CAST(TRIM("DUEDT") AS TIMESTAMP), 
	TRIM("BASEDONSAMPLEID") , 
	TRIM("COLLECTEDBY") , 
	TRIM("TEMPLATEFLAG") , 
	TRIM("RECEIVEDBY") , 
	TRIM("DISPOSEDBY") , 
	TRIM("REVIEWEDBY") , 
	CAST(TRIM("REVIEWEDDT") AS TIMESTAMP), 
	TRIM("REVIEWDISPOSITION") , 
	TRIM("REVIEWREMARKS") , 
	CAST(TRIM("NUMBERLABELS") AS INTEGER), 
	TRIM("CONTROLSUBSTANCEFLAG") , 
	TRIM("RECEIVEREQUIREDFLAG") , 
	TRIM("COCREQUIREDFLAG") , 
	TRIM("AUTORECEIVEFLAG") , 
	CAST(TRIM("EVENTDT") AS TIMESTAMP), 
	TRIM("AUTOFINALRPTFLAG") , 
	TRIM("EVENTPLAN") , 
	TRIM("STUDYID") , 
	TRIM("CONDITIONLABEL") , 
	TRIM("EVENTPLANITEM") , 
	TRIM("SAMPLEFAMILYID") , 
	TRIM("SCHEDULERULELABEL") , 
	TRIM("CONFIRMEDBY") , 
	CAST(TRIM("CONFIRMEDDT") AS TIMESTAMP), 
	TRIM("SSTUDYID") , 
	TRIM("POOLEDFLAG") , 
	TRIM("GLPFLAG") , 
	TRIM("COCFLAG") , 
	TRIM("RESTRICTIONSFLAG") , 
	TRIM("CONCENTRATION"), 
	TRIM("CONCENTRATIONUNITS") , 
	TRIM("STORAGESTATUS") , 
	TRIM("PREVIOUSSTORAGESTATUS") , 
	TRIM("DEVIATIONS") , 
	TRIM("TREATMENTS") , 
	TRIM("ALLOCATEDFORADDRESSID") , 
	TRIM("ALLOCATEDFORADDRESSTYPE") , 
	TRIM("ALLOCATEDFORDEPARTMENTID") , 
	TRIM("PREPTYPEID") , 
	TRIM("STORAGEDISPOSALSTATUS") , 
	TRIM("REAGENTLOTID") , 
	TRIM("QCSAMPLETYPE") , 
	TRIM("SPECIMENTYPE") , 
	CAST(TRIM("DISPOSALTARGETDT") AS TIMESTAMP), 
	TRIM("SOURCESPID") , 
	TRIM("SOURCESPVERSIONID") , 
	TRIM("SOURCESPLEVELID") , 
	TRIM("SOURCESPSOURCELABEL") , 
	TRIM("BATCHSTAGEID") , 
	TRIM("ACTIVEFLAG") , 
	TRIM("PRODUCTVERSIONID") , 
	TRIM("INSTRUMENTID") , 
	TRIM("WORKORDERID") , 
	TRIM("CLASSIFICATION") , 
	TRIM("SAMPLESUBTYPEID") , 
	CAST(TRIM("DUEDTOFFSET") AS INTEGER), 
	TRIM("DUEDTOFFSETTIMEUNIT") , 
	TRIM("DUEDTOVERRIDEFLAG") , 
	TRIM("SOURCESDIWORKITEMID") , 
	TRIM("REQUESTITEMID") , 
	TRIM("REQUESTITEMDETAILID") , 
	CAST(TRIM("CANCELLEDDT") AS TIMESTAMP), 
	TRIM("CANCELLEDBY") , 
	TRIM("SDIWORKITEMCOMPLETIONSTATUS") , 
	TRIM("SCHEDULETEMPLATEFLAG") , 
	CAST(TRIM("EVENTNUM") AS INTEGER), 
	TRIM("PROCESSINSTRUCTION") , 
	TRIM("PROCESSTYPE") , 
	TRIM("MONITORGROUPID") , 
	TRIM("LOCATIONPATH") , 
	CAST(TRIM("SAMPLEPOINTINSTANCE") AS INTEGER), 
	TRIM("MATERIALID") , 
	CAST(TRIM("PROCESSINGSTARTDT") AS TIMESTAMP), 
	CAST(TRIM("PROCESSINGENDDT") AS TIMESTAMP), 
	TRIM("WAPSTATUS") , 
	TRIM("TESTINGDEPARTMENTID") , 
	TRIM("WORKAREADEPARTMENTID") , 
	TRIM("ASSIGNEDANALYSTID") , 
	TRIM("ASSIGNEDDEPARTMENTID") , 
	TRIM("SITEDEPARTMENTID") , 
	CAST(TRIM("PLANNEDSTARTDT") AS TIMESTAMP), 
	TRIM("SECURITYUSER") , 
	TRIM("SECURITYDEPARTMENT") , 
	TRIM("SLX_USERSAMPLEID") , 
	TRIM("SLX_SUPERVISOR") , 
	TRIM("SLX_SUBMITTER") , 
	TRIM("SLX_REQUESTER") , 
	TRIM("SLX_MATERIALID") , 
	TRIM("SLX_MATERIALTYPE") , 
	TRIM("SLX_MATERIALVERSIONID") , 
	TRIM("SLX_TEMPLATETYPE") , 
	TRIM("SLX_ROUTEID") , 
	TRIM("SLX_ROUTEVERSIONID") , 
	TRIM("SLX_SAMPLINGKITID") , 
	TRIM("SLX_SAMPLINGKITVERSIONID") , 
	TRIM("SLX_ORIGINALSAMPLEPLANID"), 
	TRIM("SLX_SAMPLEPLANNAME") , 
	TRIM("SLX_ORIGINALMATERIALID"),
	$cycl_time_id$,
	$scen_id$,
	''$inrt_by$'',
  current_timestamp as inrt_dt from BHC_CPV_LAVAL.BS_LVL_GLIMS_S_SAMPLE base
  where NOT EXISTS (SELECT 1 FROM COMM_OPS.QC_MAST, COMM_OPS.QC_ERR_DTL WHERE QC_MAST.QC_ID=QC_ERR_DTL.QC_ID
  AND QC_MAST.CRTLY=1 AND QC_ERR_DTL.ACTV_FLG=1 AND QC_ERR_DTL.cycl_time_id=$cycl_time_id$ AND QC_ERR_DTL.scen_id=$scen_id$
  AND lower(QC_ERR_DTL.tbl_nm)=''BHC_CPV_LAVAL.BS_LVL_GLIMS_S_SAMPLE'' AND base.ROW_ID = QC_ERR_DTL.ROW_ID);', 1, NULL, 'etluser', NULL, 'etluser', '');